{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), []);\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return this._httpService.get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao consultar as negociações da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return this._httpService.get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao consultar as negociações da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return this._httpService.get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao consultar as negociações da semana retrasada');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(() => {\r\n                console.log(erro)\r\n                throw new Error('Negociação adicionada com sucesso')\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(() => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações')\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => negociacoes.filter(negociacao =>\r\n                !listaAtual.some(negociacaoExistente =>\r\n                    negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações para importar')\r\n            });\r\n    }\r\n}"]}